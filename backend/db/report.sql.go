// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: report.sql

package db

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const getItemStockReport = `-- name: GetItemStockReport :many
Select item_code::text, item_name::text, item_um::text, item_quantity::float8  from core.get_item_stock($1, $2::int[], $3::int[],$4::uuid[])
`

type GetItemStockReportParams struct {
	Date             time.Time
	InventoryList    []int32
	ItemCategoryList []int32
	ItemList         []uuid.UUID
}

type GetItemStockReportRow struct {
	ItemCode     string
	ItemName     string
	ItemUm       string
	ItemQuantity float64
}

func (q *Queries) GetItemStockReport(ctx context.Context, arg GetItemStockReportParams) ([]GetItemStockReportRow, error) {
	rows, err := q.db.Query(ctx, getItemStockReport,
		arg.Date,
		arg.InventoryList,
		arg.ItemCategoryList,
		arg.ItemList,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetItemStockReportRow
	for rows.Next() {
		var i GetItemStockReportRow
		if err := rows.Scan(
			&i.ItemCode,
			&i.ItemName,
			&i.ItemUm,
			&i.ItemQuantity,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getProductionNotesReport = `-- name: GetProductionNotesReport :many
Select date::date, partner_name::text, item_name::text, item_quantity::float8, quantity1::float8, quantity2::float8, quantity3::float8, quantity4::float8, quantity5::float8, quantity6::float8  from core.get_production_note_report($1, $2,$3::uuid[])
`

type GetProductionNotesReportParams struct {
	StartDate time.Time
	EndDate   time.Time
	Partners  []uuid.UUID
}

type GetProductionNotesReportRow struct {
	Date         time.Time
	PartnerName  string
	ItemName     string
	ItemQuantity float64
	Quantity1    float64
	Quantity2    float64
	Quantity3    float64
	Quantity4    float64
	Quantity5    float64
	Quantity6    float64
}

func (q *Queries) GetProductionNotesReport(ctx context.Context, arg GetProductionNotesReportParams) ([]GetProductionNotesReportRow, error) {
	rows, err := q.db.Query(ctx, getProductionNotesReport, arg.StartDate, arg.EndDate, arg.Partners)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetProductionNotesReportRow
	for rows.Next() {
		var i GetProductionNotesReportRow
		if err := rows.Scan(
			&i.Date,
			&i.PartnerName,
			&i.ItemName,
			&i.ItemQuantity,
			&i.Quantity1,
			&i.Quantity2,
			&i.Quantity3,
			&i.Quantity4,
			&i.Quantity5,
			&i.Quantity6,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTransactionAvailableItems = `-- name: GetTransactionAvailableItems :many
SELECT h_id::UUID, d_id::UUID, number::text, date::date, item_id::UUID, item_code::text, item_name::text,  quantity::float, um_id::INTEGER, um_name::text, vat_id::INTEGER, vat_name::text,vat_percent::float  FROM core.get_transaction_available_items($1::uuid[], $2::int)
`

type GetTransactionAvailableItemsParams struct {
	InputPartners      []uuid.UUID
	InputTransactionID int32
}

type GetTransactionAvailableItemsRow struct {
	HID        uuid.UUID
	DID        uuid.UUID
	Number     string
	Date       time.Time
	ItemID     uuid.UUID
	ItemCode   string
	ItemName   string
	Quantity   float64
	UmID       int32
	UmName     string
	VatID      int32
	VatName    string
	VatPercent float64
}

func (q *Queries) GetTransactionAvailableItems(ctx context.Context, arg GetTransactionAvailableItemsParams) ([]GetTransactionAvailableItemsRow, error) {
	rows, err := q.db.Query(ctx, getTransactionAvailableItems, arg.InputPartners, arg.InputTransactionID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetTransactionAvailableItemsRow
	for rows.Next() {
		var i GetTransactionAvailableItemsRow
		if err := rows.Scan(
			&i.HID,
			&i.DID,
			&i.Number,
			&i.Date,
			&i.ItemID,
			&i.ItemCode,
			&i.ItemName,
			&i.Quantity,
			&i.UmID,
			&i.UmName,
			&i.VatID,
			&i.VatName,
			&i.VatPercent,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
