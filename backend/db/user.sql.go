// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: user.sql

package db

import (
	"context"
	"database/sql"
)

const getUserById = `-- name: GetUserById :one
SELECT id,
       phone_number,
       user_type,
       name,
       device_id,
       email
from core.users
WHERE id = $1
LIMIT 1
`

func (q *Queries) GetUserById(ctx context.Context, id string) (CoreUser, error) {
	row := q.db.QueryRow(ctx, getUserById, id)
	var i CoreUser
	err := row.Scan(
		&i.ID,
		&i.PhoneNumber,
		&i.UserType,
		&i.Name,
		&i.DeviceID,
		&i.Email,
	)
	return i, err
}

const saveUser = `-- name: SaveUser :one
INSERT INTO core.users(id,phone_number,name,user_type,email,device_id)
values ($1,$2,$3,$4,$5,$6)
RETURNING id
`

type SaveUserParams struct {
	ID          string
	PhoneNumber string
	Name        string
	UserType    string
	Email       sql.NullString
	DeviceID    sql.NullString
}

func (q *Queries) SaveUser(ctx context.Context, arg SaveUserParams) (string, error) {
	row := q.db.QueryRow(ctx, saveUser,
		arg.ID,
		arg.PhoneNumber,
		arg.Name,
		arg.UserType,
		arg.Email,
		arg.DeviceID,
	)
	var id string
	err := row.Scan(&id)
	return id, err
}

const updateUser = `-- name: UpdateUser :one
Update core.users
SET
    name = $2,
    email = $3
where id=$1
RETURNING
    id::text,
    phone_number::text,
    user_type::text,
    name::text,
    email::text,
    device_id::text
`

type UpdateUserParams struct {
	ID    string
	Name  string
	Email sql.NullString
}

type UpdateUserRow struct {
	ID          string
	PhoneNumber string
	UserType    string
	Name        string
	Email       string
	DeviceID    string
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (UpdateUserRow, error) {
	row := q.db.QueryRow(ctx, updateUser, arg.ID, arg.Name, arg.Email)
	var i UpdateUserRow
	err := row.Scan(
		&i.ID,
		&i.PhoneNumber,
		&i.UserType,
		&i.Name,
		&i.Email,
		&i.DeviceID,
	)
	return i, err
}

const userExists = `-- name: UserExists :one
SELECT EXISTS(
               SELECT 1
               FROM core.users
               WHERE id = $1
           ) AS exists
`

func (q *Queries) UserExists(ctx context.Context, id string) (bool, error) {
	row := q.db.QueryRow(ctx, userExists, id)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}
