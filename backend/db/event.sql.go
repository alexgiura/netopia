// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: event.sql

package db

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const saveEvent = `-- name: SaveEvent :one
INSERT INTO core.events(name,date)
values ($1,$2)
RETURNING id
`

type SaveEventParams struct {
	Name string
	Date time.Time
}

func (q *Queries) SaveEvent(ctx context.Context, arg SaveEventParams) (uuid.UUID, error) {
	row := q.db.QueryRow(ctx, saveEvent, arg.Name, arg.Date)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}

const upsertEventRegistration = `-- name: UpsertEventRegistration :one
INSERT INTO core.event_registrations(
    event_id,
    name,
    email,
    phone,
    consultant_name,
    product_uses,
    doTerra_account

)
VALUES ($1,$2,$3,$4,$5,$6,$7)
    ON CONFLICT ON CONSTRAINT event_registrations_constraint
DO UPDATE SET
    name = $2,
           email = $3,
           phone = $4,
       consultant_name = $5,
        product_uses = $6,
       doTerra_account = $7
           RETURNING
           event_id::UUID,
           name::text,
           email::text,
           phone::text,
           consultant_name::text,
           product_uses::text,
           doTerra_account::boolen
`

type UpsertEventRegistrationParams struct {
	EventID        uuid.UUID
	Name           string
	Email          string
	Phone          string
	ConsultantName sql.NullString
	ProductUses    sql.NullString
	DoterraAccount bool
}

type UpsertEventRegistrationRow struct {
	EventID        uuid.UUID
	Name           string
	Email          string
	Phone          string
	ConsultantName string
	ProductUses    string
	DoterraAccount interface{}
}

func (q *Queries) UpsertEventRegistration(ctx context.Context, arg UpsertEventRegistrationParams) (UpsertEventRegistrationRow, error) {
	row := q.db.QueryRow(ctx, upsertEventRegistration,
		arg.EventID,
		arg.Name,
		arg.Email,
		arg.Phone,
		arg.ConsultantName,
		arg.ProductUses,
		arg.DoterraAccount,
	)
	var i UpsertEventRegistrationRow
	err := row.Scan(
		&i.EventID,
		&i.Name,
		&i.Email,
		&i.Phone,
		&i.ConsultantName,
		&i.ProductUses,
		&i.DoterraAccount,
	)
	return i, err
}
