// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: department.sql

package db

import (
	"context"
	"database/sql"
)

const getDepartmentList = `-- name: GetDepartmentList :many
Select id::int, name::text, flags::int  from core.get_department_list()
`

type GetDepartmentListRow struct {
	ID    int32
	Name  string
	Flags int32
}

func (q *Queries) GetDepartmentList(ctx context.Context) ([]GetDepartmentListRow, error) {
	rows, err := q.db.Query(ctx, getDepartmentList)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetDepartmentListRow
	for rows.Next() {
		var i GetDepartmentListRow
		if err := rows.Scan(&i.ID, &i.Name, &i.Flags); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getParentDepartments = `-- name: GetParentDepartments :many
SELECT child_id::int,id::int, name::text, flags::int FROM core.get_parent_departments($1::int[])
`

type GetParentDepartmentsRow struct {
	ChildID int32
	ID      int32
	Name    string
	Flags   int32
}

func (q *Queries) GetParentDepartments(ctx context.Context, departmentIds []int32) ([]GetParentDepartmentsRow, error) {
	rows, err := q.db.Query(ctx, getParentDepartments, departmentIds)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetParentDepartmentsRow
	for rows.Next() {
		var i GetParentDepartmentsRow
		if err := rows.Scan(
			&i.ChildID,
			&i.ID,
			&i.Name,
			&i.Flags,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertDepartment = `-- name: InsertDepartment :one
SELECT id::int, name::text, flags::int FROM core.create_department($1::text, $2::int,$3::int[])
`

type InsertDepartmentParams struct {
	Name      string
	Flags     sql.NullInt32
	ParentIds []int32
}

type InsertDepartmentRow struct {
	ID    int32
	Name  string
	Flags int32
}

func (q *Queries) InsertDepartment(ctx context.Context, arg InsertDepartmentParams) (InsertDepartmentRow, error) {
	row := q.db.QueryRow(ctx, insertDepartment, arg.Name, arg.Flags, arg.ParentIds)
	var i InsertDepartmentRow
	err := row.Scan(&i.ID, &i.Name, &i.Flags)
	return i, err
}

const updateDepartment = `-- name: UpdateDepartment :one
SELECT id::int, name::text, flags::int FROM core.update_department($1, $2::text, $3::int, $4::int[])
`

type UpdateDepartmentParams struct {
	ID        int32
	Name      sql.NullString
	Flags     sql.NullInt32
	ParentIds []int32
}

type UpdateDepartmentRow struct {
	ID    int32
	Name  string
	Flags int32
}

func (q *Queries) UpdateDepartment(ctx context.Context, arg UpdateDepartmentParams) (UpdateDepartmentRow, error) {
	row := q.db.QueryRow(ctx, updateDepartment,
		arg.ID,
		arg.Name,
		arg.Flags,
		arg.ParentIds,
	)
	var i UpdateDepartmentRow
	err := row.Scan(&i.ID, &i.Name, &i.Flags)
	return i, err
}
