package handlers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.44

import (
	"backend/db"
	_err "backend/errors"
	"backend/graph/model"
	"backend/middleware"
	"backend/util"
	"context"

	"github.com/jackc/pgconn"
	"go.uber.org/zap"
)

// SaveUser is the resolver for the saveUser field.
func (r *mutationResolver) SaveUser(ctx context.Context, input model.SaveUserInput) (*string, error) {
	// Get the user ID from the context
	userId, ok := middleware.GetUserUUIDFromContext(ctx)
	if !ok {
		return nil, _err.Error(ctx, "User not found in context", "UserNotFound")
	}
	saveModel := db.SaveUserParams{
		ID:          *userId,
		PhoneNumber: input.PhoneNumber,
		UserType:    input.UserType,
		Name:        input.Name,
		Email:       util.NullableStr(input.Email),
		DeviceID:    util.NullableStr(input.DeviceID),
	}
	id, err := r.DBProvider.SaveUser(ctx, saveModel)
	if err != nil {
		err, ok := err.(*pgconn.PgError)
		if ok && err.Code == _err.Codes_Duplicate_Key {
			return nil, _err.Error(ctx, "User already exists", "UserAlreadyExists")
		}
		r.Logger.Error("failed to execute DBProvider.SaveUser", zap.Error(err))
		return nil, _err.Error(ctx, "Failed to save user in DB", "InternalError")
	}
	return &id, nil
}

// UpdateUser is the resolver for the updateUser field.
func (r *mutationResolver) UpdateUser(ctx context.Context, input model.UpdateUserInput) (*model.User, error) {
	// Get the user ID from the context
	userId, ok := middleware.GetUserUUIDFromContext(ctx)
	if !ok {
		return nil, _err.Error(ctx, "User not found in context", "UserNotFound")
	}

	updateModel := db.UpdateUserParams{
		ID:    *userId,
		Name:  input.Name,
		Email: util.NullableStr(input.Email),
	}
	user, err := r.DBProvider.UpdateUser(ctx, updateModel)
	if err != nil {
		r.Logger.Error("failed to execute DBProvider.UpdateUser", zap.Error(err))
		return nil, _err.Error(ctx, "Failed to update user", "DatabaseError")
	}
	return &model.User{
		ID:          user.ID,
		PhoneNumber: user.PhoneNumber,
		UserType:    user.UserType,
		Name:        user.Name,
		Email:       &user.Email,
		DeviceID:    &user.DeviceID,
	}, nil
}

// GetUser is the resolver for the getUser field.
func (r *queryResolver) GetUser(ctx context.Context) (*model.User, error) {
	//// Get the user ID from the context
	//userId, ok := middleware.GetUserUUIDFromContext(ctx)
	//if !ok {
	//	return nil, _err.Error(ctx, "User not found in context", "UserNotFound")
	//}
	userId := "1"
	user, err := r.DBProvider.GetUserById(ctx, userId)
	if err != nil {
		r.Logger.Error("failed to execute DBProvider.GetUserById", zap.Error(err))
		return nil, _err.Error(ctx, "User not found in DB", "InternalError")
	}
	return &model.User{
		ID:          user.ID,
		PhoneNumber: user.PhoneNumber,
		UserType:    user.UserType,
		Name:        user.Name,
		Email:       &user.Email.String,
		DeviceID:    &user.DeviceID.String,
	}, nil
}
