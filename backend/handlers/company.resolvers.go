package handlers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.44

import (
	_err "backend/errors"
	"backend/models"
	"backend/util"
	"context"
	"errors"
	"log"

	pgx "github.com/jackc/pgx/v4"
)

// GetCompany is the resolver for the getCompany field.
func (r *queryResolver) GetCompany(ctx context.Context) (*models.Company, error) {
	row, err := r.DBProvider.GetCompany(ctx)
	if err != nil {
		if errors.Is(err, pgx.ErrNoRows) {
			return nil, nil
		}
		log.Print("\"message\":Failed to execute DBProvider.GetCompany, "+"\"error\": ", err.Error())
		return nil, _err.Error(ctx, "InvalidCompany", "DatabaseError")
	}
	return &models.Company{

		Name:               row.Name,
		VatNumber:          row.VatNumber,
		RegistrationNumber: *util.StringOrNil(row.RegistrationNumber),
	}, nil
}

// GetCompanyByTaxID is the resolver for the getCompanyByTaxId field.
func (r *queryResolver) GetCompanyByTaxID(ctx context.Context, taxID *string) (*models.Company, error) {
	company, err := r._GetCompanyInfo(ctx, taxID)
	if err != nil || company == nil {
		return nil, _err.Error(ctx, "InvalidTaxId", "InternalError")
	}
	return company, nil
}
