package handlers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.44

import (
	"backend/db"
	_err "backend/errors"
	"backend/graph/model"
	"backend/models"
	"backend/util"
	"context"
	"errors"
	"log"

	"github.com/google/uuid"
	pgx "github.com/jackc/pgx/v4"
	"go.uber.org/zap"
)

// SavePartner is the resolver for the savePartner field.
func (r *mutationResolver) SavePartner(ctx context.Context, input model.PartnerInput) (*string, error) {
	if input.ID == nil {
		_, err := r.DBProvider.InsertPartner(ctx, db.InsertPartnerParams{
			Code:               util.NullableStr(input.Code),
			Name:               input.Name,
			Type:               input.Type,
			VatNumber:          util.NullableStr(input.VatNumber),
			Vat:                input.Vat,
			RegistrationNumber: util.NullableStr(input.RegistrationNumber),
			PersonalNumber:     util.NullableStr(input.PersonalNumber),
		})
		if err != nil {
			log.Print("\"message\":Failed to insert partner, "+"\"error\": ", err.Error())
			return nil, _err.Error(ctx, "InsertFailed", "DatabaseError")
		}
	} else {
		IdUuid, err := uuid.Parse(*input.ID)
		if err != nil {
			log.Print("\"message\":Failed to parse ID, "+"\"error\": ", err.Error())
			return nil, _err.Error(ctx, "InvalidPartnerId", "InternalError")
		}
		err = r.DBProvider.UpdatePartner(ctx, db.UpdatePartnerParams{
			ID:                 IdUuid,
			Code:               util.NullableStr(input.Code),
			Name:               input.Name,
			IsActive:           *input.IsActive,
			Type:               input.Type,
			Vat:                input.Vat,
			VatNumber:          util.NullableStr(input.VatNumber),
			RegistrationNumber: util.NullableStr(input.RegistrationNumber),
			PersonalNumber:     util.NullableStr(input.PersonalNumber),
		})
		if err != nil {
			log.Print("\"message\":Failed to update partner, "+"\"error\": ", err.Error())
			return nil, _err.Error(ctx, "UpdateFailed", "DatabaseError")
		}
	}
	response := "success"
	return &response, nil
}

// GetPartners is the resolver for the getPartners field.
func (r *queryResolver) GetPartners(ctx context.Context) ([]*models.Partner, error) {
	rows, err := r.DBProvider.GetPartners(ctx)
	if err != nil {
		if errors.Is(err, pgx.ErrNoRows) {
			return nil, nil
		}
		r.Logger.Error("failed to execute DBProvider.GetPartners", zap.Error(err))
		return nil, _err.Error(ctx, "Failed to get partners", "DatabaseError")
	}
	partners := make([]*models.Partner, 0)

	for _, row := range rows {
		partner := &models.Partner{
			ID:                 row.ID.String(),
			Code:               util.StringOrNil(row.Code),
			Type:               row.Type,
			Active:             row.IsActive,
			Name:               row.Name,
			Vat:                row.Vat,
			VatNumber:          util.StringOrNil(row.VatNumber),
			RegistrationNumber: util.StringOrNil(row.RegistrationNumber),
			IndividualNumber:   util.StringOrNil(row.PersonalNumber),
		}

		partners = append(partners, partner)
	}
	return partners, nil
}
