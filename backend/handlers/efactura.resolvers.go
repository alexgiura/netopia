package handlers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.44

import (
	_err "backend/errors"
	"backend/graph/model"
	"backend/util"
	"context"
	"log"

	"github.com/printesoi/e-factura-go/oauth2"
)

// GenerateEfacturaAuthorizationLink is the resolver for the generateEfacturaAuthorizationLink field.
func (r *mutationResolver) GenerateEfacturaAuthorizationLink(ctx context.Context) (*string, error) {
	uuid, err := r.DBProvider.GenerateAuthorization(ctx)
	if err != nil {
		log.Print("\"message\":GenerateAuthorization failed, "+"\"error\": ", err.Error())
		return nil, _err.Error(ctx, "InsertFailed", "DatabaseError")
	}

	oauth2Cfg, err := oauth2.MakeConfig(oauth2.ConfigCredentials(r.EfacturaSettings.ClientID, r.EfacturaSettings.ClientSecret),
		oauth2.ConfigRedirectURL(r.EfacturaSettings.CallbackURL))
	if err != nil {
		log.Print("\"message\":oauth2.MakeConfig failed, "+"\"error\": ", err.Error())
		return nil, _err.Error(ctx, "Failed to generate authorization URL", "InternalError")
	}

	authURL := oauth2Cfg.AuthCodeURL(uuid.String())
	return &authURL, nil
}

// UploadEfacturaDocument is the resolver for the uploadEfacturaDocument field.
func (r *mutationResolver) UploadEfacturaDocument(ctx context.Context, input model.GenerateEfacturaDocumentInput) (*string, error) {
	docID := util.StrToUUID(&input.HID)
	regenerate := false
	if input.Regenerate != nil {
		regenerate = *input.Regenerate
	}
	efacturaDocID, _, err := r._EfacturaGenerateAndUpload(ctx, docID, regenerate)
	if err != nil {
		return nil, err
	}
	return util.StringPtr(efacturaDocID.String()), nil
}

// CheckEfacturaUploadState is the resolver for the checkEfacturaUploadState field.
func (r *mutationResolver) CheckEfacturaUploadState(ctx context.Context, efacturaDocumentID string) (*string, error) {
	docID := util.StrToUUID(&efacturaDocumentID)
	status, err := r._EfacturaCheckUploadState(ctx, docID)
	if err != nil {
		return nil, err
	}
	return util.StringPtr(string(status)), nil
}
